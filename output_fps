# gen-unique-video from video with lots of changeless frames
# My use case - I want to look at my ring videos, but skip the parts where nothing changes.
# When ring creates a motion video, it starts 30s before motion, and often ends with 30s
# no motion. E.g <same-20s>-<motion-20s>-<same-20s>
# So, my goal is trim the video  down to <same-2s>-<motion-20s><same-2s>

# Random Libraries
# pose-detectin: https://github.com/CMU-Perceptual-Computing-Lab/openpose
# easier open CV: https://github.com/jrosebr1/imutils
# Sci-Kit Image: https://scikit-image.org/
# Python Motion Detecor: https://www.geeksforgeeks.org/webcam-motion-detector-python/

from imutils.video import FileVideoStream, FPS
from imutils import skeletonize
from icecream import ic
from pendulum import duration
import cv2
import numpy as np
from dataclasses import dataclass


@dataclass
class FrameState:
    idx: any
    frame_hash_diff: any
    frame_hash_old: any


analysis_fps = 30
output_fps = 120


def process_frame(state: FrameState, in_frame):
    # Gray Scale Frame
    gray = cv2.cvtColor(in_frame, cv2.COLOR_BGR2GRAY)

    # Running 60 FPS input
    # Only skeletonize every second
    is_analysis_frame = state.idx % analysis_fps == 0
    frame = gray
    if is_analysis_frame:
        skeleton = skeletonize(gray, size=(3, 3))
        # frame = skeleton
        frame_hash = np.sum(skeleton)
        state.frame_hash_diff = state.frame_hash_old - frame_hash
        state.frame_hash_old = frame_hash
    else:
        return

    cv2.putText(
        frame,
        f"{state.idx}:{state.frame_hash_diff}",
        (10, 30),
        cv2.FONT_HERSHEY_SIMPLEX,
        0.6,
        (255, 255, 255),
        2,
    )

    # Skip every 100 frames
    cv2.imshow("Frame", frame)
    display_duration_ms = int(duration(seconds=1 / output_fps).total_seconds() * 1000)
    cv2.waitKey(display_duration_ms)


def main():
    print("Hello")
    input_file = "in.mp4"
    out_file = "unique.mp4"
    fvs = FileVideoStream(input_file)
    # start the FPS timer
    fps = FPS().start()
    ic(input_file)
    ic(fps)
    ic(fvs)
    stream = cv2.VideoCapture(input_file)
    ic(stream.isOpened())
    count_frames = 0
    frame_state = FrameState(0, 0, 0)

    while True:
        count_frames += 1
        # grab the frame from the threaded video file stream, resize
        # it, and convert it to grayscale (while still retaining 3
        # channels)
        ret, in_frame = stream.read()
        if not ret:
            break
        frame_state.idx = count_frames
        process_frame(frame_state, in_frame)
        fps.update()

    # stop the timer and display FPS information
    fps.stop()
    ic(fps.elapsed())
    ic(fps.fps())
    ic(count_frames)

    # do a bit of cleanup
    cv2.destroyAllWindows()


main()
